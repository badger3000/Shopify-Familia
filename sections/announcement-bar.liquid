{%- liquid assign show_bar = false 
 unless section.settings.first_text == blank and section.settings.last_text == blank and section.settings.date == blank
 assign show_bar = true 
 endunless -%}

{%- if section.settings.show_bar and show_bar -%}
<style>
  #shopify-section-{{ section.id }} .announcement-bar {
    border-color:transparent !important;
    {%- if section.settings.bg_style == 'gradient' -%}
    background: {{ section.settings.bgcolor2 }};
      {%- else -%}
      background-color:{{ section.settings.bgcolor }};
      {%- endif -%}
      }
  #shopify-section-{{ section.id }} .announcement-bar .announcement-bar__message, 
  #shopify-section-{{ section.id }} .announcement-bar .announcement-bar__message *, 
  #shopify-section-{{ section.id }} .announcement-bar .announcement-bar__message ul li span,
  #shopify-section-{{ section.id }} .announcement-bar .announcement_icon,
   #shopify-section-{{ section.id }} .announcement-bar .announce_close{
    color:{{ section.settings.fontcolor }};
  }
  #shopify-section-{{ section.id }} .announcement-bar .announcement-bar__message .announce-btn{
    color:{{ section.settings.btn_fontcolor }};
    background-color:{{ section.settings.btn_bgcolor }};
    border-color:{{ section.settings.bborder_color }};
  }
</style>
<div id="announcement{{ section.id }}" class="announcement-bar hidden" role="region" aria-label="{{ 'sections.announcement.heading' | t }}">
  <div class="announcement-bar__message" >
    {%- unless section.settings.icon == 'none' %}
    <span class="announcement_icon">{% render 'icons' icon : section.settings.icon -%}</span>
    {%- endunless -%}
    {%- if section.settings.first_text != blank -%}
    <p>{{- section.settings.first_text -}}</p>
    {%- endif -%}
    {%- if section.settings.date != blank -%}
    <div id="announcementTimer" class="hidden" tabindex="0">
      <input type="hidden" id="eventDate" value="{{- section.settings.date -}}">
      <ul class="list-unstyled">
        <li><span id="days"></span>:</li>
        <li><span id="hours"></span>:</li>
        <li><span id="minutes"></span>:</li>
        <li><span id="seconds"></span></li>
      </ul>
    </div>
    <p id="dayHours"></p>
    {%- endif -%}
    {%- if section.settings.btn != blank and section.settings.link != blank -%}
    <a class="announce-btn" href="{{ section.settings.link }}">{{- section.settings.btn -}}</a>
    {%- endif %}
    {%- if section.settings.show_close -%}
    <button type="button" class="announce_close" aria-label="{{ 'sections.announcement.close' | t }}">
      <svg viewBox="0 0 41.93 41.89"><g><g ><g><path class="d" d="M26.26,20.95l14.54-14.53c.73-.73,1.13-1.67,1.13-2.65s-.4-1.92-1.13-2.64c-1.51-1.51-3.79-1.51-5.3,0l-14.54,14.53L6.42,1.13C4.91-.38,2.63-.38,1.13,1.13,.4,1.86,0,2.8,0,3.78s.4,1.92,1.13,2.65l14.54,14.53L1.12,35.48C.4,36.2,0,37.14,0,38.12s.4,1.92,1.12,2.65c1.45,1.45,3.84,1.45,5.29,0l14.54-14.53,14.54,14.53c.73,.72,1.67,1.12,2.65,1.12s1.92-.4,2.65-1.12c.73-.73,1.13-1.67,1.13-2.65,0-.98-.4-1.92-1.13-2.64l-14.54-14.53Z"/></g></g></g></svg>
    </button>
    {%- endif -%}
  </div>
</div>
<script>
  function announcementTimer(){
    const second = 1000,
          minute = second * 60,
          hour = minute * 60,
          day = hour * 24;

    var eventdate = document.getElementById("eventDate");

    if(eventdate) {
      const myArr = eventdate.value.split("/");
      let _day = myArr[0];
      let _month = myArr[1];
      let _year = myArr[2];
      let _date = _month+"/"+_day+"/"+_year+" 00:00:00";
      let countDown = new Date(_date).getTime();

      x = setInterval(function() {    

        let now = new Date().getTime(),
            distance = countDown - now;
        if(distance > 0){
          document.getElementById("announcementTimer").classList.remove('hidden'); 
          var leftDays = Math.floor(distance / (day));
          if(leftDays > 0){
            document.getElementById("dayHours").textContent= '{{ 'general.days' | t }}';
          }
          else{
            document.getElementById("dayHours").textContent = '{{ 'general.hours' | t }}';
          }
          document.getElementById("days").innerText = pad2(leftDays),
            document.getElementById("hours").innerText = pad2(Math.floor((distance % (day)) / (hour))),
            document.getElementById("minutes").innerText = pad2(Math.floor((distance % (hour)) / (minute))),
            document.getElementById("seconds").innerText = pad2(Math.floor((distance % (minute)) / second));
        }
        else{
          document.getElementById("announcementTimer").classList.add('hidden');
          document.querySelector('body').classList.remove('announcement-open');
          clearInterval(x);
        }
      }, 0)
    }

    setTimeout(function(){
      var getnew_Pop = Cookies.get('announcement_closed');
      if(getnew_Pop != "true"){
        document.querySelector('body').classList.add('announcement-open');
      }      
    },500);
  }
  
  function initAnnouncement(){
    var getnew_Pop = Cookies.get('announcement_closed');
    if(getnew_Pop != "true"){      
      $('#announcement{{ section.id }}').removeClass('hidden');
        $('body').removeClass('announcement-open');
    }
  }
  
  document.addEventListener("DOMContentLoaded", announcementTimer,false);  
  document.addEventListener("DOMContentLoaded", initAnnouncement,false);
  
  $('.announce_close').click(function(){
    $('.announcement-bar').slideToggle();
    var date = new Date();
    date.setTime(date.getTime() + (parseInt(24 * 60 * 60 * 1000)));
    Cookies.set('announcement_closed', 'true', { expires: date, path: '/' });
    $('body').removeClass('announcement-open');
    setTimeout(function(){
      let headerHeight = $('#headerSection').height();
      $('.yv-collections-topbar').css('top',headerHeight+'px');
    },500);
  });
  
</script>

{%- endif -%}

{% schema %}
{
  "name": "t:sections.announcement-bar.name",
  "class": "announcement-bar-section",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_bar",
      "default": true,
      "label": "t:sections.announcement-bar.settings.show_bar.label"
    },
    {
      "type": "checkbox",
      "id": "show_close",
      "default": true,
      "label": "t:sections.announcement-bar.settings.show_close.label"
    },
    {
      "type": "select",
      "id": "icon",
      "label": "t:common.icon.label",
      "default": "gift",
      "options": [
        {
          "label": "t:sections.announcement-bar.settings.icon.none.label",
          "value": "none"
        },
        {
          "label": "t:common.icon.options.chat.label",
          "value": "chat"
        },
        {
          "label": "t:common.icon.options.eye.label",
          "value": "eye"
        },
        {
          "label": "t:common.icon.options.file.label",
          "value": "file"
        },
        {
          "label": "t:common.icon.options.gift.label",
          "value": "gift"
        },
        {
          "label": "t:common.icon.options.global.label",
          "value": "global"
        },
        {
          "label": "t:common.icon.options.heart.label",
          "value": "heart"
        },
        {
          "label": "t:common.icon.options.phone.label",
          "value": "phone"
        },
        {
          "label": "t:common.icon.options.refund.label",
          "value": "refund"
        },
        {
          "label": "t:common.icon.options.search.label",
          "value": "search"
        },
        {
          "label": "t:common.icon.options.secure.label",
          "value": "secure"
        },
        {
          "label": "t:common.icon.options.shipping.label",
          "value": "shipping"
        },
        {
          "label": "t:common.icon.options.smile.label",
          "value": "smile"
        },
        {
          "label": "t:common.icon.options.support.label",
          "value": "support"
        },
        {
          "label": "t:common.icon.options.tag.label",
          "value": "tag"
        },
        {
          "label": "t:common.icon.options.thumb.label",
          "value": "thumb"
        },
        {
          "label": "t:common.icon.options.user.label",
          "value": "user"
        }
      ]
    },
    {
        "type":"header",
        "content": "t:common.header.text_section.label"
    },
    {
      "type": "text",
      "id": "first_text",
      "label": "t:sections.announcement-bar.settings.first_text.label",
      "default": "Announcement Here"
    },
    {
      "type": "text",
      "id": "date",
      "label": "t:sections.announcement-bar.settings.date.label",
      "info": "t:sections.announcement-bar.settings.date.info"
    },
    {
        "type":"header",
        "content": "t:common.header.button_section.label"
    },
    {
      "type": "text",
      "id": "btn",
      "label": "t:sections.announcement-bar.settings.btn.label"
    },
    {
      "type": "url",
      "id": "link",
      "label": "t:sections.announcement-bar.settings.link.label"
    },
    {
        "type":"header",
        "content": "t:common.header.color_section.label"
    },
    {
      "type": "color",
      "id": "fontcolor",
      "default": "#ffffff",
      "label": "t:sections.announcement-bar.settings.fontcolor.label"
    },
    {
        "type":"paragraph",
        "content": "t:common.header.background_section.label"
    },
    {
      "type": "select",
      "id": "bg_style",
      "label": "t:sections.announcement-bar.settings.bg_style.label",
      "default": "solid",
      "options": [
        {
          "label": "t:sections.announcement-bar.settings.bg_style.solid.label",
          "value": "solid"
        },
        {
          "label": "t:sections.announcement-bar.settings.bg_style.gradient.label",
          "value": "gradient"
        }
      ]
    },
    {
      "type": "color",
      "id": "bgcolor",
      "default": "#181818",
      "label": "t:sections.announcement-bar.settings.bgcolor.label"
    },
    {
      "type": "color_background",
      "id": "bgcolor2",
      "label": "t:sections.announcement-bar.settings.bgcolor2.label"
    },
    {
        "type":"paragraph",
        "content": "t:common.header.button_section.label"
    },
    {
      "type": "color",
      "id": "btn_bgcolor",
      "default": "#ffffff",
      "label": "t:sections.announcement-bar.settings.btn_bgcolor.label"
    },
    {
      "type": "color",
      "id": "btn_fontcolor",
      "default": "#181818",
      "label": "t:sections.announcement-bar.settings.btn_fontcolor.label"
    },
    {
      "type": "color",
      "id": "bborder_color",
      "default": "#ffffff",
      "label": "t:sections.announcement-bar.settings.bborder_color.label"
    }
  ]
}
{% endschema %}